// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/haierkeys/obsidian-image-api-gateway/internal/model"
)

func newCloudConfig(db *gorm.DB, opts ...gen.DOOption) cloudConfig {
	_cloudConfig := cloudConfig{}

	_cloudConfig.cloudConfigDo.UseDB(db, opts...)
	_cloudConfig.cloudConfigDo.UseModel(&model.CloudConfig{})

	tableName := _cloudConfig.cloudConfigDo.TableName()
	_cloudConfig.ALL = field.NewAsterisk(tableName)
	_cloudConfig.ID = field.NewInt64(tableName, "id")
	_cloudConfig.UID = field.NewInt64(tableName, "uid")
	_cloudConfig.Type = field.NewString(tableName, "type")
	_cloudConfig.Endpoint = field.NewString(tableName, "endpoint")
	_cloudConfig.Region = field.NewString(tableName, "region")
	_cloudConfig.AccountID = field.NewString(tableName, "account_id")
	_cloudConfig.BucketName = field.NewString(tableName, "bucket_name")
	_cloudConfig.AccessKeyID = field.NewString(tableName, "access_key_id")
	_cloudConfig.AccessKeySecret = field.NewString(tableName, "access_key_secret")
	_cloudConfig.CustomPath = field.NewString(tableName, "custom_path")
	_cloudConfig.AccessURLPrefix = field.NewString(tableName, "access_url_prefix")
	_cloudConfig.IsEnabled = field.NewInt64(tableName, "is_enabled")
	_cloudConfig.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_cloudConfig.UpdatedAt = field.NewField(tableName, "updated_at")
	_cloudConfig.CreatedAt = field.NewField(tableName, "created_at")
	_cloudConfig.DeletedAt = field.NewField(tableName, "deleted_at")

	_cloudConfig.fillFieldMap()

	return _cloudConfig
}

type cloudConfig struct {
	cloudConfigDo cloudConfigDo

	ALL             field.Asterisk
	ID              field.Int64
	UID             field.Int64
	Type            field.String
	Endpoint        field.String
	Region          field.String
	AccountID       field.String
	BucketName      field.String
	AccessKeyID     field.String
	AccessKeySecret field.String
	CustomPath      field.String
	AccessURLPrefix field.String
	IsEnabled       field.Int64
	IsDeleted       field.Int64
	UpdatedAt       field.Field
	CreatedAt       field.Field
	DeletedAt       field.Field

	fieldMap map[string]field.Expr
}

func (c cloudConfig) Table(newTableName string) *cloudConfig {
	c.cloudConfigDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cloudConfig) As(alias string) *cloudConfig {
	c.cloudConfigDo.DO = *(c.cloudConfigDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cloudConfig) updateTableName(table string) *cloudConfig {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.UID = field.NewInt64(table, "uid")
	c.Type = field.NewString(table, "type")
	c.Endpoint = field.NewString(table, "endpoint")
	c.Region = field.NewString(table, "region")
	c.AccountID = field.NewString(table, "account_id")
	c.BucketName = field.NewString(table, "bucket_name")
	c.AccessKeyID = field.NewString(table, "access_key_id")
	c.AccessKeySecret = field.NewString(table, "access_key_secret")
	c.CustomPath = field.NewString(table, "custom_path")
	c.AccessURLPrefix = field.NewString(table, "access_url_prefix")
	c.IsEnabled = field.NewInt64(table, "is_enabled")
	c.IsDeleted = field.NewInt64(table, "is_deleted")
	c.UpdatedAt = field.NewField(table, "updated_at")
	c.CreatedAt = field.NewField(table, "created_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *cloudConfig) WithContext(ctx context.Context) ICloudConfigDo {
	return c.cloudConfigDo.WithContext(ctx)
}

func (c cloudConfig) TableName() string { return c.cloudConfigDo.TableName() }

func (c cloudConfig) Alias() string { return c.cloudConfigDo.Alias() }

func (c cloudConfig) Columns(cols ...field.Expr) gen.Columns { return c.cloudConfigDo.Columns(cols...) }

func (c *cloudConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cloudConfig) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 16)
	c.fieldMap["id"] = c.ID
	c.fieldMap["uid"] = c.UID
	c.fieldMap["type"] = c.Type
	c.fieldMap["endpoint"] = c.Endpoint
	c.fieldMap["region"] = c.Region
	c.fieldMap["account_id"] = c.AccountID
	c.fieldMap["bucket_name"] = c.BucketName
	c.fieldMap["access_key_id"] = c.AccessKeyID
	c.fieldMap["access_key_secret"] = c.AccessKeySecret
	c.fieldMap["custom_path"] = c.CustomPath
	c.fieldMap["access_url_prefix"] = c.AccessURLPrefix
	c.fieldMap["is_enabled"] = c.IsEnabled
	c.fieldMap["is_deleted"] = c.IsDeleted
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c cloudConfig) clone(db *gorm.DB) cloudConfig {
	c.cloudConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cloudConfig) replaceDB(db *gorm.DB) cloudConfig {
	c.cloudConfigDo.ReplaceDB(db)
	return c
}

type cloudConfigDo struct{ gen.DO }

type ICloudConfigDo interface {
	gen.SubQuery
	Debug() ICloudConfigDo
	WithContext(ctx context.Context) ICloudConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICloudConfigDo
	WriteDB() ICloudConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICloudConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICloudConfigDo
	Not(conds ...gen.Condition) ICloudConfigDo
	Or(conds ...gen.Condition) ICloudConfigDo
	Select(conds ...field.Expr) ICloudConfigDo
	Where(conds ...gen.Condition) ICloudConfigDo
	Order(conds ...field.Expr) ICloudConfigDo
	Distinct(cols ...field.Expr) ICloudConfigDo
	Omit(cols ...field.Expr) ICloudConfigDo
	Join(table schema.Tabler, on ...field.Expr) ICloudConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICloudConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICloudConfigDo
	Group(cols ...field.Expr) ICloudConfigDo
	Having(conds ...gen.Condition) ICloudConfigDo
	Limit(limit int) ICloudConfigDo
	Offset(offset int) ICloudConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICloudConfigDo
	Unscoped() ICloudConfigDo
	Create(values ...*model.CloudConfig) error
	CreateInBatches(values []*model.CloudConfig, batchSize int) error
	Save(values ...*model.CloudConfig) error
	First() (*model.CloudConfig, error)
	Take() (*model.CloudConfig, error)
	Last() (*model.CloudConfig, error)
	Find() ([]*model.CloudConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CloudConfig, err error)
	FindInBatches(result *[]*model.CloudConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CloudConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICloudConfigDo
	Assign(attrs ...field.AssignExpr) ICloudConfigDo
	Joins(fields ...field.RelationField) ICloudConfigDo
	Preload(fields ...field.RelationField) ICloudConfigDo
	FirstOrInit() (*model.CloudConfig, error)
	FirstOrCreate() (*model.CloudConfig, error)
	FindByPage(offset int, limit int) (result []*model.CloudConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICloudConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cloudConfigDo) Debug() ICloudConfigDo {
	return c.withDO(c.DO.Debug())
}

func (c cloudConfigDo) WithContext(ctx context.Context) ICloudConfigDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cloudConfigDo) ReadDB() ICloudConfigDo {
	return c.Clauses(dbresolver.Read)
}

func (c cloudConfigDo) WriteDB() ICloudConfigDo {
	return c.Clauses(dbresolver.Write)
}

func (c cloudConfigDo) Session(config *gorm.Session) ICloudConfigDo {
	return c.withDO(c.DO.Session(config))
}

func (c cloudConfigDo) Clauses(conds ...clause.Expression) ICloudConfigDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cloudConfigDo) Returning(value interface{}, columns ...string) ICloudConfigDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cloudConfigDo) Not(conds ...gen.Condition) ICloudConfigDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cloudConfigDo) Or(conds ...gen.Condition) ICloudConfigDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cloudConfigDo) Select(conds ...field.Expr) ICloudConfigDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cloudConfigDo) Where(conds ...gen.Condition) ICloudConfigDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cloudConfigDo) Order(conds ...field.Expr) ICloudConfigDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cloudConfigDo) Distinct(cols ...field.Expr) ICloudConfigDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cloudConfigDo) Omit(cols ...field.Expr) ICloudConfigDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cloudConfigDo) Join(table schema.Tabler, on ...field.Expr) ICloudConfigDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cloudConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICloudConfigDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cloudConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) ICloudConfigDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cloudConfigDo) Group(cols ...field.Expr) ICloudConfigDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cloudConfigDo) Having(conds ...gen.Condition) ICloudConfigDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cloudConfigDo) Limit(limit int) ICloudConfigDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cloudConfigDo) Offset(offset int) ICloudConfigDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cloudConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICloudConfigDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cloudConfigDo) Unscoped() ICloudConfigDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cloudConfigDo) Create(values ...*model.CloudConfig) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cloudConfigDo) CreateInBatches(values []*model.CloudConfig, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cloudConfigDo) Save(values ...*model.CloudConfig) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cloudConfigDo) First() (*model.CloudConfig, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudConfig), nil
	}
}

func (c cloudConfigDo) Take() (*model.CloudConfig, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudConfig), nil
	}
}

func (c cloudConfigDo) Last() (*model.CloudConfig, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudConfig), nil
	}
}

func (c cloudConfigDo) Find() ([]*model.CloudConfig, error) {
	result, err := c.DO.Find()
	return result.([]*model.CloudConfig), err
}

func (c cloudConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CloudConfig, err error) {
	buf := make([]*model.CloudConfig, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cloudConfigDo) FindInBatches(result *[]*model.CloudConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cloudConfigDo) Attrs(attrs ...field.AssignExpr) ICloudConfigDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cloudConfigDo) Assign(attrs ...field.AssignExpr) ICloudConfigDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cloudConfigDo) Joins(fields ...field.RelationField) ICloudConfigDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cloudConfigDo) Preload(fields ...field.RelationField) ICloudConfigDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cloudConfigDo) FirstOrInit() (*model.CloudConfig, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudConfig), nil
	}
}

func (c cloudConfigDo) FirstOrCreate() (*model.CloudConfig, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CloudConfig), nil
	}
}

func (c cloudConfigDo) FindByPage(offset int, limit int) (result []*model.CloudConfig, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cloudConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cloudConfigDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cloudConfigDo) Delete(models ...*model.CloudConfig) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cloudConfigDo) withDO(do gen.Dao) *cloudConfigDo {
	c.DO = *do.(*gen.DO)
	return c
}
